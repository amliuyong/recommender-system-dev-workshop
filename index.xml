<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recommender System Solution workshop on Recommender System Solution</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/</link><description>Recent content in Recommender System Solution workshop on Recommender System Solution</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gcr-solutions.github.io/recommender-system-dev-workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Cloud9</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/cloud9/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/cloud9/readme/</guid><description>AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal.
Create new Cloud9 IDE environment If you donâ€™t already have an AWS account with Administrator access: create one now by clicking here Go to AWS Cloud9 Console Use the region drop list to select Asia Pacific (Tokyo)ap-northeast-1 Click Create environment button to create an cloud9 environment Name it gcr-rs-dev-workshop, click Next Take all default values, click Next step and Create environment This will take about 2 minutes to provision</description></item><item><title>Install eksctl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/tools/eksctl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/tools/eksctl/readme/</guid><description>eksctl is a command line tool for working with EKS clusters that automates many individual tasks. For this workshop you will use a eksctl. Once you install eksctl, you will be ready to get started.
At the terminal command prompt, enter the following two commands:
curl --silent --location &amp;#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&amp;#34; | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin This will install eksctl in your Cloud9 environment. To test to make sure the command is installed properly, execute the command:</description></item><item><title>Create an IAM role for your workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/create-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/create-role/readme/</guid><description> Follow this deep link to create an IAM role with Administrator access. Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions. Confirm that AdministratorAccess is checked, then click Next to review. Enter gcr-rs-dev-workshop-admin for the Name, and select Create Role</description></item><item><title>Install kubectl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/tools/kubectl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/tools/kubectl/readme/</guid><description>The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs.
At the terminal command prompt, enter the following two commands:
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl This will install kubectl in your Cloud9 environment. To test to make sure the command is installed properly, execute the command:</description></item><item><title>Attach the IAM role to your workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/attach-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/attach-role/readme/</guid><description> In the Cloud9 workspace, click the grey circle button (in top right corner) and select Manage EC2 Instance. EC2 dashboard will be opened, select the &amp;ldquo;aws-cloud9-gcr-rs-dev-workshop-xxx&amp;rdquo; instance, then choose Actions / Security / Modify IAM Role Choose gcr-rs-dev-workshop-admin from the IAM Role drop down, and select Save</description></item><item><title>Update IAM settings for your workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/update-role-settings/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/update-role-settings/readme/</guid><description>Cloud9 normally manages IAM credentials dynamically. This isn&amp;rsquo;t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.
Go to your Cloud9 workspace and click the gear icon (in top right corner) Select AWS SETTINGS Turn off AWS managed temporary credentials Close the Preferences tab Install jq
sudo yum -y install jq To ensure temporary credentials aren&amp;rsquo;t already in place we will also remove any existing credentials file:</description></item><item><title>Create an SSH key</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/create-ssh-key/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/create-ssh-key/readme/</guid><description>Please run this command to generate SSH Key in Cloud9. This key will be used on the worker node instances to allow ssh access if necessary.
ssh-keygen Press enter 3 times to take the default choices
Upload the public key to your EC2 region:
aws ec2 import-key-pair --key-name &amp;#34;gcr-rs-dev-workshop-key&amp;#34; --public-key-material file://~/.</description></item><item><title>Setup github account in cloud9 workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/setup-github-config/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/workspace/setup-github-config/readme/</guid><description>1, Set up git with your user name and email through following commands, please replace Your name here and your_email@example.com with your github account.
git config --global user.name &amp;#34;Your name here&amp;#34; git config --global user.email &amp;#34;your_email@example.com&amp;#34; 2, Set up ssh on your cloud9 workspace.
Check if you have files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub. if not, please follow Create an SSH key to create such public/private keys.
Copy your public key (content of ~/.</description></item><item><title>Install kustomize</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/tools/kustomize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/prerequisite/tools/kustomize/readme/</guid><description>Install Kustomize Kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.
Install kustomize for Linux:
curl --silent --location --remote-name \ &amp;#34;https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64&amp;#34; &amp;amp;&amp;amp; \ chmod a+x kustomize_kustomize.v3.2.3_linux_amd64 &amp;amp;&amp;amp; \ sudo mv kustomize_kustomize.v3.2.3_linux_amd64 /usr/local/bin/kustomize Verify the install with:
kustomize version You should see the message like below:</description></item><item><title>Develop Online of Recommender System</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/develop-experience/4_develop_online/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/develop-experience/4_develop_online/readme/</guid><description>In this part, you&amp;rsquo;ll change some code to add two features in online part, and then deploy them to your Recommender System.
Add hot topic Open recommender-system-dev-workshop-code/src/filter/plugins/news/service.py file Go to line 355 and uncomment below code. # hot_topic_news_list = self.get_hot_topic_news_list(user_id, hot_topic_count, present_recommend_news_id_list, recommended_news_list) Push your change to your github repo Go to codebuild project to check gcr-rs-dev-workshop-filter-build, it should be triggered. After gcr-rs-dev-workshop-filter-build succeeded, ArgoCD will deploy filter services in 3 minutes, please go to ArgoCD to check it.</description></item><item><title>Develop Offline of Recommender System TODO from Liuyong</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/develop-experience/5_develop_offline/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/develop-experience/5_develop_offline/readme/</guid><description> Update below file src/offline/news/inverted-list/src/inverted-list.py line 268, change the line to
df_update.loc[df_update.new == 1, &amp;#39;popularity&amp;#39;] = 0.0 commit your code
run code build to build new docker image
Go to codebuild project rs-dev-workshop-offline-news-inverted-list-build, start codebuild for that project.</description></item></channel></rss>