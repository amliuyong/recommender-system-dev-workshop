<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>推荐系统解决方案 on Recommender System Solution</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/</link><description>Recent content in 推荐系统解决方案 on Recommender System Solution</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/index.xml" rel="self" type="application/rss+xml"/><item><title>安装 eksctl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/eksctl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/eksctl/readme/</guid><description>eksctl 是一个命令行工具，用于处理 EKS 集群，可自动执行许多单独的任务。 在此workshop中，您将使用 eksctl 。 安装 eksctl 后，您就可以开始使用了。
在终端命令行下，输入以下两个命令：
curl --silent --location &amp;#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&amp;#34; | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin 这将在您的 EC2 环境中安装 eksctl。 要测试以确保命令安装正确，请执行以下命令：
eksctl get cluster 您应该会收到 &amp;ldquo;No clusters found&amp;rdquo; 消息。
eksctl version 您应该获得“0.48.0”或更高版本。</description></item><item><title>安装 Kubectl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kubectl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kubectl/readme/</guid><description>Kubernetes 命令行工具 kubectl 允许您针对 Kubernetes 集群运行命令。 您可以使用 kubectl 来部署应用程序、检查和管理集群资源以及查看日志。
在终端命令提示符下，输入以下两个命令：
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl 这将在您的 EC2 环境中安装 kubectl。 要测试以确保命令安装正确，请执行以下命令：
kubectl version --client 您应该会看到 kubectl 版本消息。</description></item><item><title>创建 SSH 密钥</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/create-ssh-key/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/create-ssh-key/readme/</guid><description>运行以下命令在 EC2 中生成 SSH 密钥，此密钥将允许以 ssh 方式访问工作节点实例。
ssh-keygen 按回车 3次以采用默认选择
将公钥上传到您的 EC2 实例：
aws ec2 import-key-pair --key-name &amp;#34;gcr-rs-dev-workshop-key&amp;#34; --public-key-material file://~/.ssh/id_rsa.pub</description></item><item><title>安装 kustomize</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kustomize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kustomize/readme/</guid><description>安装 Kustomize Kustomize 可让您自定义原始、无模板的 YAML 文件以用于多种用途，而原始 YAML 文件保持不变并可按原样使用。
Linux 下安装 kustomize：
curl --silent --location --remote-name \ &amp;#34;https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64&amp;#34; &amp;amp;&amp;amp; \ chmod a+x kustomize_kustomize.v3.2.3_linux_amd64 &amp;amp;&amp;amp; \ sudo mv kustomize_kustomize.v3.2.3_linux_amd64 /usr/local/bin/kustomize 使用以下命令验证安装：
kustomize version 您应该会看到如下消息：</description></item><item><title>开发推荐系统在线部分</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/4_develop_online/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/4_develop_online/readme/</guid><description>在这一部分，您将更改一些代码，并在在线部分添加两个功能，然后将它们部署到您的推荐系统。
添加热点话题 打开recommender-system-dev-workshop-code/src/filter/plugins/news/service.py文件
转到第 355 行并取消注释下面的代码。
# hot_topic_news_list = self.get_hot_topic_news_list(user_id, hot_topic_count, present_recommend_news_id_list, recommended_news_list) 将您的更改推送到您的 github 存储库
cd /home/ec2-user/environment/recommender-system-dev-workshop-code/src/filter/plugins/news git pull git add service.py git commit -m &amp;quot;test for online development&amp;quot; git push 打开 codebuild 项目 并检查 gcr-rs-dev-workshop-filter-build，它应该已经被触发。
当gcr-rs-dev-workshop-filter-build更新成功后，ArgoCD会在3分钟内部署filter服务，请到ArgoCD查看。
验证：当点击三个新闻后，您将看到推荐列表由冷启动逻辑转换成个性化推荐逻辑。 推荐结果由两部分组成，第一部分是根据您的用户画像中最感兴趣的类型进行的顶级推荐。在这个例子中，由于gcr-rs-admin对娱乐很感兴趣，所以推荐列表的前3行是娱乐新闻：
增加用户画像召回功能。 您刚刚部署的推荐系统只是根据用户的最近点击新闻来进行召回，您将按照以下步骤添加根据用户画像进行召回的功能。 打开/recommender-system-dev-workshop-code/src/recall/plugins/news/service_impl.py文件
找到第 142 行并取消注释下面的代码。
# self.recall_by_portrait(user_portrait, recall_wrap, recall_items, multiple_shot_record) 将您的更改推送到您的 github 存储库</description></item><item><title>开发推荐系统离线部分</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/5_develop_offline/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/5_develop_offline/readme/</guid><description>体验召回逻辑 体验不含关键词的召回逻辑 在 argo GUI 中查看召回日志
在推荐列表中点击 4 ～ 5 个新闻
在 ArgoCD 网站中查看召回服务日志
体验包含关键词的召回逻辑 运行以下脚本来更改召回配置文件：
cd /home/ec2-user/environment/recommender-system-dev-workshop-code/scripts ./change-recall-config-offline.sh 旧的配置文件：
新的配置文件：
召回配置文件已更改，离线部分通知在线部分加载新的配置文件。点击 Step Function链接 ，搜索 rs-dev-workshop-News-NotificationStepFunc 并等待该步骤函数状态为成功。
此步骤大约需要 4 分钟
再次点击推荐列表中的4~5条新闻
在 argo GUI 中查看召回日志
从日志中，我们可以看到更新了新的配置
可以看到包含关键词的召回日志</description></item></channel></rss>