<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>推荐系统解决方案 on Recommender System Solution</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/</link><description>Recent content in 推荐系统解决方案 on Recommender System Solution</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/index.xml" rel="self" type="application/rss+xml"/><item><title>安装 eksctl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/eksctl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/eksctl/readme/</guid><description>eksctl 是一个命令行工具，用于处理 EKS 集群，可自动执行许多单独的任务。 在此workshop中，您将使用 eksctl 。 安装 eksctl 后，您就可以开始使用了。
在终端命令行下，输入以下两个命令：
curl --silent --location &amp;#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&amp;#34; | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin 这将在您的 Cloud9 环境中安装 eksctl。 要测试以确保命令安装正确，请执行以下命令：
eksctl get cluster 您应该会收到 &amp;ldquo;No clusters found&amp;rdquo; 消息。
eksctl version 您应该获得“0.48.0”或更高版本。</description></item><item><title>设置 Cloud9</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/cloud9/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/cloud9/readme/</guid><description>AWS Cloud9 是一个基于云的集成开发环境 (IDE)，让您只需一个浏览器即可编写、运行和调试代码。 它包括代码编辑器、调试器和终端。
创建新的Cloud9 IDE 环境 打开 AWS Cloud9 Console 点击地区选择列表并选择 Asia Pacific (Tokyo)ap-northeast-1 点击 Create environment 按钮来创建新的Cloud9环境 命名为 gcr-rs-dev-workshop, 点击 Next 保留所有默认选项, 点击 Next step 与 Create environment 这将需要大约 2 分钟的时间进行配置
当配置完成时，cloud9 控制台环境应该如下所示：
配置 Cloud9 IDE 环境 当环境创建成功后，通过以下方式配置环境：
1 . 关闭所有窗口
2 . 打开一个新的命令行窗口
3 . 在整个workshop部署期间，在浏览器中保持AWS Cloud9的打开状态，因为我们将通过它进行诸如使用 AWS CLI 和运行 Bash 脚本之类的工作。</description></item><item><title>创建 IAM 角色</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/create-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/create-role/readme/</guid><description> 打开 链接 来创建一个拥有管理员权限的 IAM 角色 确认选择了AWS服务和EC2，然后点击Next: Permissions查看权限。 确认AdministratorAccess被勾选，然后点击Next。 名称输入gcr-rs-dev-workshop-admin，点击Create Role</description></item><item><title>安装 Kubectl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kubectl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kubectl/readme/</guid><description>Kubernetes 命令行工具 kubectl 允许您针对 Kubernetes 集群运行命令。 您可以使用 kubectl 来部署应用程序、检查和管理集群资源以及查看日志。
在终端命令提示符下，输入以下两个命令：
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl 这将在您的 Cloud9 环境中安装 kubectl。 要测试以确保命令安装正确，请执行以下命令：
kubectl version --client 您应该会看到 kubectl 版本消息。</description></item><item><title>附加 IAM 角色</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/attach-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/attach-role/readme/</guid><description> 在 Cloud9 IDE中，单击灰色圆圈按钮（在右上角）并选择 Manage EC2 Instance。 将打开 EC2 仪表板，选择“aws-cloud9-gcr-rs-dev-workshop-xxx”实例，然后选择 Actions / Security / Modify IAM Role 从 IAM Role 下拉列表中选择 gcr-rs-dev-workshop-admin，然后选择 Save</description></item><item><title>更新 IAM 设置</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/update-role-settings/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/update-role-settings/readme/</guid><description>Cloud9 通常动态管理 IAM 凭证。 这当前与 EKS IAM 身份验证不兼容，因此我们需禁用该动态管理并改为依赖于 IAM 角色。
打开您的 Cloud9 工作区并单击齿轮图标（在右上角） 选择 AWS SETTINGS 关闭 AWS managed temporary credentials 关闭设置 安装 jq 工具
sudo yum -y install jq 为确保没有使用临时证书，我们还将删除所有现有的证书：
rm -vf ${HOME}/.aws/credentials 将当前的区域作为默认区域, 并配置 aws cli。
export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r &amp;#39;.region&amp;#39;) export REGION=${AWS_REGION} 检查 AWS_REGION 是否设置为所需区域，您应该得到 AWS_REGION is ap-northeast-1
test -n &amp;#34;$AWS_REGION&amp;#34; &amp;amp;&amp;amp; echo AWS_REGION is &amp;#34;$AWS_REGION&amp;#34; || echo AWS_REGION is not set 运行以下命令将相关数据保存到 bash_profile:</description></item><item><title>创建 SSH 密钥</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/create-ssh-key/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/create-ssh-key/readme/</guid><description>请运行此命令在 Cloud9 中生成 SSH 密钥。 如有必要，此密钥将用于工作节点实例以允许 ssh 访问。
ssh-keygen 按回车 3次以采用默认选择
将公钥上传到您的 EC2 实例：
aws ec2 import-key-pair --key-name &amp;#34;gcr-rs-dev-workshop-key&amp;#34; --public-key-material file://~/.ssh/id_rsa.pub</description></item><item><title>在 Cloud9 中设置 GitHub 账户</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/setup-github-config/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/workspace/setup-github-config/readme/</guid><description>1.输入以下命令来配置git，请将您的姓名和您的email替换为您的Github帐户信息。
git config --global user.name &amp;quot;Your name here&amp;quot;
git config --global user.email &amp;quot;your_email@example.com&amp;quot;
在 cloud9 上设置 ssh。 输入以下命令查看您是否有文件 ~/.ssh/id_rsa 和 ~/.ssh/id_rsa.pub。 如果没有，请按照 创建 SSH 密钥 来创建 公钥/私钥。 ls ~/.ssh 将您的公钥（ ~/.ssh/id_rsa.pub 文件的内容）复制到剪贴板中。
将 ssh 公钥粘贴到您的 GitHub 帐户中。 打开您的 GitHub Account Settings
单击左侧栏中的 SSH and GPG keys 。
点击右上角的New SSH key。
输入密钥名（如“My Cloud9”）并将公钥粘贴到文本框中。
通过以下命令测试您的配置： ssh -T git@github.</description></item><item><title>安装 kustomize</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kustomize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/prerequisite/tools/kustomize/readme/</guid><description>安装 Kustomize Kustomize 可让您自定义原始、无模板的 YAML 文件以用于多种用途，而原始 YAML 文件保持不变并可按原样使用。
Linux 下安装 kustomize：
curl --silent --location --remote-name \ &amp;#34;https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64&amp;#34; &amp;amp;&amp;amp; \ chmod a+x kustomize_kustomize.v3.2.3_linux_amd64 &amp;amp;&amp;amp; \ sudo mv kustomize_kustomize.v3.2.3_linux_amd64 /usr/local/bin/kustomize 使用以下命令验证安装：
kustomize version 您应该会看到如下消息：</description></item><item><title>开发推荐系统在线部分</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/4_develop_online/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/4_develop_online/readme/</guid><description>在这一部分，您将更改一些代码，并在在线部分添加两个功能，然后将它们部署到您的推荐系统。
添加热点话题 打开recommender-system-dev-workshop-code/src/filter/plugins/news/service.py文件 转到第 355 行并取消注释下面的代码。 # hot_topic_news_list = self.get_hot_topic_news_list(user_id, hot_topic_count, present_recommend_news_id_list, recommended_news_list) 将您的更改推送到您的 github 存储库 cd /home/ec2-user/environment/recommender-system-dev-workshop-code/src/filter/plugins/news git pull git add service.py git commit -m &amp;quot;test for online development&amp;quot; git push 打开 codebuild 项目 并检查 gcr-rs-dev-workshop-filter-build，它应该已经被触发。 当gcr-rs-dev-workshop-filter-build更新成功后，ArgoCD会在3分钟内部署filter服务，请到ArgoCD查看。 验证：当点击三个新闻后，您将看到推荐列表由冷启动逻辑转换成个性化推荐逻辑。 推荐结果由两部分组成，第一部分是根据您的用户画像中最感兴趣的类型进行的顶级推荐。在这个例子中，由于gcr-rs-admin对娱乐很感兴趣，所以推荐列表的前3行是娱乐新闻： 2.增加用户画像召回功能。 您刚刚部署的推荐系统只是根据用户的最近点击新闻来进行召回，您将按照以下步骤添加根据用户画像进行召回的功能。
打开/recommender-system-dev-workshop-code/src/recall/plugins/news/service_impl.py文件 找到第 142 行并取消注释下面的代码。 # self.recall_by_portrait(user_portrait, recall_wrap, recall_items, multiple_shot_record) 将您的更改推送到您的 github 存储库 cd /home/ec2-user/environment/recommender-system-dev-workshop-code/src/recall/plugins/news git pull git add service_impl.</description></item><item><title>开发推荐系统离线部分</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/5_develop_offline/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop/cn/develop-experience/5_develop_offline/readme/</guid><description>体验召回逻辑 体验不含关键词的召回逻辑 在 argo GUI 中查看召回日志 在推荐列表中点击 4 ～ 5 个新闻 在 ArgoCD 网站中查看召回服务日志 体验包含关键词的召回逻辑 运行以下脚本来更改召回配置文件： cd /home/ec2-user/environment/recommender-system-dev-workshop-code/scripts ./change-recall-config-offline.sh 旧的配置文件：
新的配置文件：
召回配置文件已更改，离线部分通知在线部分加载新的配置文件。
请等待大约 4 分钟，确保步骤函数 rs-dev-workshop-News-NotificationStepFunc 执行完成
2.再次点击推荐列表中的4~5条新闻
在 argo GUI 中查看召回日志 从日志中，我们可以看到更新了新的配置
可以看到包含关键词的召回日志</description></item></channel></rss>